PRACTICA 1

El programa analizará paquetes de red. Puede analizar tanto paquetes recibidos en vivo como paquetes guardados en un fichero. 
Para ello, hace uso de la librería `pcap`.

Autores: Roberto Martín Alonso, Pablo Tejero Lascorz  
Grupo: 1311  
Pareja: 03  


-Contenido

    practica1.py: Contiene la lógica del programa para procesar y analizar los paquetes.
    rc1_pcap.py: *wrapper* en Python para la librería `libpcap`.
    Captura de pantalla 2024-10-09 175209.png: Captura de pantalla comparando traza obtenida con el programa vs la obtenida con Wireshark


-Requisitos

    Sistema Operativo: Linux
    Otras Dependencias: libpcap.so


-Instrucciones de uso

    El programa necesitará permisos de superusuario para poder capturar paquetes de una interfaz en vivo. Además, se le deberán pasar como argumentos ciertos datos:

    sudo python3 practica1.py [--file] [--itf] [--nbytes] [--npkt]

    El programa recibirá los siguientes parámetros:
    * --file: Nombre del fichero `.pcap` del que leer paquetes
    * --itf: Nombre de la interfaz en vivo de la que capturar paquetes
    * --nbytes: Número de bytes al principio de cada paquete recibido que se imprimirán
    * --npkt: Número de paquetes a procesar

    Se deberá proporcionar o una interfaz de captura o una traza guardada, pero no los dos al mismo tiempo.


-Como se han obtenido los resultados:
    Para la validacion de nuestro programa y Wireshark se han puesto a capturar de forma casi simultanea los dos programas a la vez y cuando
    el nuestro terminaba de recibir los 33 paquetes se paraba la captura de Wireshark. Las trazas de Wireshark se exportan a un fichero .pcapng
    y se leen con nuestro programa tanto el fichero de Wireshark como el generado por nuestro programa y como se puede comprobar los datos
    obtenidos son los mismos


-Análisis de Criterios de Evaluación

    Normativa de entrega cumplida en su totalidad: 5% supongo no?
    Fichero leeme.txt bien explicado: 5% falta que pablo ponga su mucho texto y alguna mierda mutable de las que le gustan
    Contar paquetes de una traza (independientemente del número de paquetes): 15% si
    Contar paquetes de la interfaz de red: 10% si
    Uso de un único "flujo" para traza e interfaz: 10% si
    Almacenar correctamente el tráfico capturado en vivo una traza: 5% si
    Separar correctamente el trafico capturado en dos trazas: 10% si
    Gestionar  correctamente el numero de paquetes a leer 10% si
    Calcular tiempo entre último y primer paquete: 10% si
    Imprimir los N primeros bytes de un paquete (pruebe para N>32) y validarlo con Wireshark (captura de pantalla): 20% Si